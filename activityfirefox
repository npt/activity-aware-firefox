#!/bin/bash
#
# Compatability for Firefox and KDE Plasma Activities
#
# SPDX-License-Identifier: CC0-1.0
# SPDX-FileCopyrightText: © 2021 Matija Šuklje <matija@suklje.name>, 2022 Cristian Le <git@lecris.me>, 2022 Jarosław Czarniak <jaroslaw@czarniak.org>
#
# Required: kdialog
# Recomended: gio
#


## Edit to where the profiles are to be stored and used
FF_FOLDER="${HOME}/.mozilla/firefox"
KDIALOG="kdialog --icon firefox"
#set -x

function f_GenHelp()
{
	HELP="Template profile\n
	----------------\n
	On it's first run this script created an empty profile called 'Template profile' in ${FF_FOLDER} directory. If you choose 'Template profile' option everything you set up there will be copied to the new activity profile.\n
	In order to customize 'template profile' start firefox with command:\n
	firefox --profile ${FF_FOLDER}/????????.template-profile\n
	\n
	Full copy\n
	---------\n
	This option will copy all data found in the default firefox profile found under '${FF_FOLDER}/????????.default-release' (or alternatively under '${FF_FOLDER}/????????.default'). Please mind it _might_ take a long time and take a lot of disk space.\n
	\n
	WARNING: Please mind that Mozilla developers advise against making full profile copy.\n
	\n
	Minimal\n
	-------\n
	This is fastest and most cost-effective method. Only few importent files will be copied over:\n
	- Bookmarks, Downloads and Browsing History\n
	- Passwords\n
	- Site-specific preferences\n
	- Search engines\n
	- Personal dictionary\n
	- Autocomplete history\n
	- Cookies\n
	- Security certificate settings\n
	- Download actions\n
	- Toolbar customization\n
	- User preferences\n
	\n
	More on this subject: https://support.mozilla.org/en-US/kb/profiles-where-firefox-stores-user-data\n
	\n\n
	New\n
	---\n
	This option will create a fresh new profile without copying anything. This is the fastest method, but you will end up with Firefox default settings, so you might need to manually modify settings yourself.
	\n\n

	THIS SCRIPT WILL EXIT NOW."

	echo -ne ${HELP} > ${FF_FOLDER}/activityfirefox.help
}

function f_DeleteUnusedProfile()
{
	cd "${FF_FOLDER}" || exit
	for PROFILE_DIR in $(ls -d ????????.*_????????-????-????-????-????????????); do
		PROFILE_ID=$(cut -f2 -d'_' <<< "${PROFILE_DIR}")
		PROFILE_NAME=$(cut -f1 -d'_' <<< "${PROFILE_DIR}"| cut -f2 -d'.')
		ACTIVITY_STATE=$(qdbus org.kde.ActivityManager /ActivityManager/Activities ActivityState "${PROFILE_ID}")
		if [ "${ACTIVITY_STATE}" = "0" ];then
			${KDIALOG} --title "Missing Activity" --warningyesno "Activity ${PROFILE_NAME} doesn't exists anymore.\nRemove unused FF profile directory?\n(${PROFILE_DIR})"
			if [ $? -eq 0 ]; then	# yes
				if [ $GIO_EXISTS -eq 1 ]; then
					# move profile dir to trash
					gio trash "${PROFILE_DIR}" || true
				else
					# more direct approach. move profile dir to trash manually
					mv -f "${FF_FOLDER}/${PROFILE_DIR}" "${HOME}/.local/share/Trash/files"
				fi
				# get profile section name with matching "Name" value
				SECTION_NAME=$(awk '/\[Profile[0-9]*\]/ {label=$0} /Name='${PROFILE_NAME}'_'${PROFILE_ID}'/ {print label}' "${FF_FOLDER}/profiles.ini"|tr -cd '[:alnum:]')
				# remove section from profiles file
				if [ "${SECTION_NAME}" != "" ]; then
					gawk -i inplace '/^\[Profile/{if($0~/\['${SECTION_NAME}'\]/){found=1}else{found=""}} !found' "${FF_FOLDER}/profiles.ini"
				fi
			fi
		fi
	done
}

function f_CheckAndPrepare()
{
	## Template profile path can be used for profile copying.
	TPL_PROF="${FF_FOLDER}/????????.template-profile"
	if [ ! -d ${TPL_PROF} ]; then
		$FF_BIN -CreateProfile "template-profile"
	fi
	TPL_PROF_SIZE="$(du -hs ${TPL_PROF} | cut -f1)B"
}

function f_FSyncPrepare()
{
	#ls -l ${FF_FOLDER}
	#ls -l ${NEW_PROF}
	# new instance reqs a new token otherwise it will be visible as the old one. re-login is required.
	mv ${NEW_PROF}/signedInUser.json $(ls -d ${NEW_PROF}/signedInUser.json).old
	# set new FF sync instance name
	sed -i 's/user_pref("'identity.fxaccounts.account.device.name'",.*);/user_pref("'identity.fxaccounts.account.device.name'", "'${FF_SYNC_NAME}'");/' ${NEW_PROF}/prefs.js
}

function f_CheckDeps()
{
	FF_BIN=$(which firefox)
	## Not the most secure way to check for firefox existence but it does its job
	if [ $? -ne 0 ]; then
		echo ">>> Could not locate firefox executable"
		${KDIALOG} --error "Could not locate firefox executable"
		exit 1
	fi

	#check if gio cmd exists on a system
	GIO_EXISTS=0
	command -v gio > /dev/null 2>&1
	if (( $? == 0 )) ; then
		GIO_EXISTS=1
	fi

	#check if kdialog exists on a system
	command -v kdialog > /dev/null 2>&1
	if (( $? != 0 )) ; then
		echo ">>> Error! Requirement kdialog missing. Exiting."
		notify-send -u critical  -i "firefox" 'Error !!' 'Requirement kdialog missing. Exiting.'
		exit 1
	fi
}

f_GenHelp
f_CheckDeps
f_CheckAndPrepare
f_DeleteUnusedProfile


ACTIVITY=$(qdbus org.kde.ActivityManager /ActivityManager/Activities CurrentActivity)
## Remove all (but '-') non alphanumeric characters from the activity name
ACTIVITY_NAME=$(gawk -v RS='( |[^[:alnum:]-])+' '{printf "%s", sep $0; sep=""}'<<<"$(qdbus org.kde.ActivityManager /ActivityManager/Activities ActivityName ${ACTIVITY})")
ACTIVITY_ID="${ACTIVITY_NAME}_${ACTIVITY}"
echo ">>> ${ACTIVITY_ID}"
FF_SYNC_NAME="${HOSTNAME}-${ACTIVITY_NAME}"

## Default profile
DEF_PROF="${FF_FOLDER}/????????.default-release"
if [ ! -d ${DEF_PROF} ]; then
	DEF_PROF="${FF_FOLDER}/????????.default"
	if [ ! -d ${DEF_PROF} ]; then
		echo ">>> Could not locate the default profile"
		${KDIALOG} --error "Could not locate the default profile in ${FF_FOLDER} directory"
		exit 1
	fi
fi
DEF_PROF_SIZE="$(du -hs ${DEF_PROF} | cut -f1)B"

## Desired profile path of the current activity
## ? indicate randomly generated firefox names
NEW_PROF="${FF_FOLDER}/????????.${ACTIVITY_ID}"

## A profile already exist
if [ -d ${NEW_PROF} ]; then
	## --profile <path>   Start with profile at <path>.
	exec ${FF_BIN} --profile ${NEW_PROF} "$@" &
	echo ">>> Started an existing profile: ${ACTIVITY_ID}"
else
	NEW_PROF="${FF_FOLDER}/????????.${ACTIVITY_ID}"
	# noop option is used only as a visual separator
	COPY_TYPE=$(${KDIALOG} --menu "Select new profile type:" new "Create a fresh New profile (0MB)" minimal "Minimal (< 3MB)" templ "Template profile (${TPL_PROF_SIZE})" full "Full copy (${DEF_PROF_SIZE})" noop "__________________________________" help "Help me decide")
	# do not create a new profile if copy profile wasn't choosen, so it won't be started empty next time
	if [ "${COPY_TYPE}" != "help" ] && [ "${COPY_TYPE}" != "noop" ]; then
		#https://wiki.mozilla.org/Firefox/CommandLineOptions#-CreateProfile_profile_name
		$FF_BIN -CreateProfile ${ACTIVITY_ID}
		echo ">>> Created a new profile: ${ACTIVITY_ID}"
		${KDIALOG} --msgbox "Created a new profile:\n${ACTIVITY_ID}"
	fi

	if [ "${COPY_TYPE}" = "full" ]; then
		${KDIALOG} --title "Copy in progress" --passivepopup "Copying data to the new profile" 30
		cp -a ${DEF_PROF}/* ${NEW_PROF}/
		f_FSyncPrepare
		echo ">>> Copied all from default profile"
		${KDIALOG} --msgbox "Copied all from a default profile."
	elif [ "${COPY_TYPE}" = "templ" ]; then
		${KDIALOG} --title "Copy in progress" --passivepopup "Copying data to the new profile" 15
		cp -a ${TPL_PROF}/* ${NEW_PROF}/
		f_FSyncPrepare
		echo ">>> Copied all from template profile"
		${KDIALOG} --msgbox "Copied all from template profile."
	elif [ "${COPY_TYPE}" = "minimal" ]; then
		cp ${DEF_PROF}/places.sqlite ${NEW_PROF}/	 2>/dev/null
		cp ${DEF_PROF}/favicons.sqlite ${NEW_PROF}/	 2>/dev/null
		cp ${DEF_PROF}/key4.db ${NEW_PROF}/			 2>/dev/null
		cp ${DEF_PROF}/logins.json ${NEW_PROF}/		 2>/dev/null
		cp ${DEF_PROF}/permissions.sqlite ${NEW_PROF}/	 2>/dev/null
		cp ${DEF_PROF}/search.json.mozlz4 ${NEW_PROF}/	 2>/dev/null
		cp ${DEF_PROF}/formhistory.sqlite ${NEW_PROF}/	 2>/dev/null
		cp ${DEF_PROF}/cookies.sqlite ${NEW_PROF}/	 2>/dev/null
		cp ${DEF_PROF}/cert9.db ${NEW_PROF}/		 2>/dev/null
		cp ${DEF_PROF}/handlers.json ${NEW_PROF}/	 2>/dev/null
		cp ${DEF_PROF}/xulstore.json ${NEW_PROF}/	 2>/dev/null
		cp ${DEF_PROF}/prefs.js ${NEW_PROF}/		 2>/dev/null
		cp ${DEF_PROF}/containers.json ${NEW_PROF}/	 2>/dev/null
		echo ">>> Minimal data set copied"
		${KDIALOG} --msgbox "Minimal data set copied."
	elif [ "${COPY_TYPE}" = "new" ]; then
		echo ">>> No data need to be copy"
	elif [ "${COPY_TYPE}" = "help" ]; then
		kdialog --title "Help" --textbox ${FF_FOLDER}/activityfirefox.help 1024 640
		exit 0
	fi

	exec ${FF_BIN} --profile ${NEW_PROF} "$@" &
	echo ">>> Started the new profile: ${ACTIVITY_ID}"
	${KDIALOG} --msgbox "Please re-login to FF Sync."
fi

exit 0